alias gnuke="git branch  | grep -v main | xargs git branch -D"

alias gtup="gt branch up"
alias gtdown="gt branch down"

#commits
alias gfeat='function _gcfeat(){ gcmsg "feat($1):$2"};_gcfeat'
alias gfix='function _gcfix(){ gcmsg "fix($1):$2"};_gcfix'
alias gdocs='function _gcdocs(){ gcmsg "docs($1):$2"};_gcdocs'
alias gchore='function _gcchore(){ gcmsg "chore($1):$2"};_gcchore'
alias gtco='function _gcchore(){ gcmsg "chore($1):$2"};_gcchore'
alias gtco='function _gtco(){ gt branch create -a -m "$2" $1};_gtco'
alias gtmgs='function _gtmsg(){ gt commit create -a -m $1};_gtmsg'

# gtree: Create git worktrees from the current branch
#
# Usage: gtree [-p|--yarn] branch1 branch2 ...
#
# Options:
#   -p, --yarn    Install dependencies using yarn after creating worktree
#
# This function does the following:
#   1. Creates new branches from your current branch if they don't exist
#   2. Creates worktrees for each specified branch under ~/work/code/<repo-name>-<branch>
#   3. Optionally installs dependencies in each new worktree using yarn
#   4. Opens each worktree in VS Code if available
#
# Example:
#   gtree feature-1 feature-2     # Creates two worktrees
#   gtree -p new-feature         # Creates worktree and runs yarn install

gtree() {
  # Flag to determine whether to run "yarn install"
  local install_deps=false
  local branches=()
  # Parse command-line arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -p|--yarn)
        install_deps=true
        shift
        ;;
      *)
        branches+=("$1")
        shift
        ;;
    esac
  done
  # Ensure at least one branch name is provided.
  if [[ ${#branches[@]} -eq 0 ]]; then
    echo "Usage: gtree [ -p|--yarn ] branch1 branch2 ..."
    return 1
  fi
  # Determine the current branch; exit if not in a git repository.
  local current_branch
  current_branch=$(git rev-parse --abbrev-ref HEAD) || {
    echo "Error: Not a git repository."
    return 1
  }
  # Determine repository root and name.
  local repo_root repo_name
  repo_root=$(git rev-parse --show-toplevel) || {
    echo "Error: Cannot determine repository root."
    return 1
  }
  repo_name=$(basename "$repo_root")
  # Set fixed parent directory for worktrees.
  local worktree_parent="$HOME/work/code"
  # Ensure the worktree parent directory exists.
  if [[ ! -d "$worktree_parent" ]]; then
    if ! mkdir -p "$worktree_parent"; then
      echo "Error: Failed to create worktree parent directory: $worktree_parent"
      return 1
    fi
  fi
  # Loop over each branch provided as argument.
  for branch in "${branches[@]}"; do
    # Define the target path using a naming convention: <repoName>-<branch>
    local target_path="$worktree_parent/${repo_name}-${branch}"
    
    echo "Processing branch: ${branch}"
    # Check if a worktree already exists at the target path.
    if git worktree list | grep -q "^${target_path}[[:space:]]"; then
      echo "Error: Worktree already exists at ${target_path}. Skipping branch '${branch}'."
      continue
    fi
    # If the branch does not exist, create it from the current branch.
    if ! git show-ref --verify --quiet "refs/heads/${branch}"; then
      echo "Branch '${branch}' does not exist. Creating it from '${current_branch}'..."
      if ! git branch "${branch}"; then
        echo "Error: Failed to create branch '${branch}'. Skipping."
        continue
      fi
    fi
    # Create the new worktree for the branch.
    echo "Creating worktree for branch '${branch}' at ${target_path}..."
    if ! git worktree add "$target_path" "${branch}"; then
      echo "Error: Failed to create worktree for branch '${branch}'. Skipping."
      continue
    fi
    # If the install flag is set, run "yarn install" in the new worktree.
    if $install_deps; then
      echo "Installing dependencies in worktree for branch '${branch}'..."
      if ! ( cd "$target_path" && yarn ); then
        echo "Warning: Failed to install dependencies in '${target_path}'."
      fi
    fi
    # Optionally, open the worktree directory via a custom "cursor" command if available.
    if type code >/dev/null 2>&1; then
      code "$target_path"
    else
      echo "Worktree created at: ${target_path}"
    fi
    echo "Worktree for branch '${branch}' created successfully."
    echo "-----------------------------------------------------"
  done
}
# gtreemerge: Merge changes from a specified worktree branch into the original branch,
# then clean up all worktrees and delete their branches.
#
# Usage: gtreemerge <branch-to-keep>
#
# This function does the following:
#   1. Verifies that the branch to merge (branch-to-keep) exists as an active worktree.
#   2. Checks for uncommitted changes in that worktree:
#        - If changes exist, it attempts to stage and commit them.
#        - It gracefully handles the situation where there are no changes.
#   3. Switches back to the original branch we started from.
#   4. Merges the specified branch into the original branch, with proper error checking.
#   5. Uses "git worktree list" to retrieve all active worktrees (under ~/dev
#      and matching the naming pattern) and removes them.
#   6. Deletes each branch that was created for a worktree (skipping the original branch).
gtreemerge() {
  # Ensure exactly one argument is passed: the branch to merge.
  if [ $# -ne 1 ]; then
    echo "Usage: gtreemerge <branch-to-keep>"
    return 1
  fi
  local branch_to_keep="$1"
  
  # Get the current branch name before we do anything
  local original_branch
  original_branch=$(git rev-parse --abbrev-ref HEAD) || {
    echo "Error: Could not determine current branch."
    return 1
  }

  # Determine the repository root and its name.
  local repo_root repo_name
  repo_root=$(git rev-parse --show-toplevel) || {
    echo "Error: Not a git repository."
    return 1
  }
  repo_name=$(basename "$repo_root")
  # Fixed parent directory where worktrees are located.
  local worktree_parent="$HOME/work/code"
  # Retrieve all active worktrees (from git worktree list) that match our naming convention.
  local worktrees=()
  while IFS= read -r line; do
    # Extract the worktree path (first field)
    local wt_path
    wt_path=$(echo "$line" | awk '{print $1}')
    # Only consider worktrees under our fixed parent directory that match "<repo_name>-*"
    if [[ "$wt_path" == "$worktree_parent/${repo_name}-"* ]]; then
      worktrees+=("$wt_path")
    fi
  done < <(git worktree list)
  # Check that the target branch worktree exists.
  local target_worktree=""
  for wt in "${worktrees[@]}"; do
    if [[ "$wt" == "$worktree_parent/${repo_name}-${branch_to_keep}" ]]; then
      target_worktree="$wt"
      break
    fi
  done
  if [[ -z "$target_worktree" ]]; then
    echo "Error: No active worktree found for branch '${branch_to_keep}' under ${worktree_parent}."
    return 1
  fi
  # Step 1: In the target worktree, check for uncommitted changes.
  echo "Checking for uncommitted changes in worktree for branch '${branch_to_keep}'..."
  if ! ( cd "$target_worktree" && git diff --quiet && git diff --cached --quiet ); then
    echo "Changes detected in branch '${branch_to_keep}'. Attempting auto-commit..."
    if ! ( cd "$target_worktree" &&
            git add . &&
            git commit -m "chore: auto-commit changes in '${branch_to_keep}' before merge" ); then
      echo "Error: Auto-commit failed in branch '${branch_to_keep}'. Aborting merge."
      return 1
    else
      echo "Auto-commit successful in branch '${branch_to_keep}'."
    fi
  else
    echo "No uncommitted changes found in branch '${branch_to_keep}'."
  fi
  # Step 2: Switch back to the original branch
  echo "Switching back to '${original_branch}' branch..."
  if ! git checkout "${original_branch}"; then
    echo "Error: Failed to switch to '${original_branch}' branch."
    return 1
  fi
  # Step 3: Merge the target branch into the original branch
  echo "Merging branch '${branch_to_keep}' into '${original_branch}'..."
  if ! git merge "${branch_to_keep}" -m "feat: merge changes from '${branch_to_keep}'"; then
    echo "Error: Merge failed. Please resolve conflicts and try again."
    return 1
  fi
  # Step 4: Remove all worktrees that were created via gtree().
  echo "Cleaning up worktrees and deleting temporary branches..."
  for wt in "${worktrees[@]}"; do
    # Extract branch name from worktree path.
    local wt_branch
    wt_branch=$(basename "$wt")
    wt_branch=${wt_branch#${repo_name}-}  # Remove the repo name prefix
    echo "Processing worktree for branch '${wt_branch}' at ${wt}..."
    # Remove the worktree using --force to ensure removal.
    if git worktree remove "$wt" --force; then
      echo "Worktree at ${wt} removed."
    else
      echo "Warning: Failed to remove worktree at ${wt}."
    fi
    # Do not delete the original branch
    if [[ "$wt_branch" != "${original_branch}" ]]; then
      if git branch -D "$wt_branch"; then
        echo "Branch '${wt_branch}' deleted."
      else
        echo "Warning: Failed to delete branch '${wt_branch}'."
      fi
    fi
  done
  echo "Merge complete: Branch '${branch_to_keep}' merged into '${original_branch}', and all worktrees cleaned up."
}


# gtmux: Create git worktrees with tmux sessions (neovim + claude)
#
# Usage: gtmux branch1 branch2 ...
#
# This function does the following:
#   1. Creates new branches from your current branch if they don't exist
#   2. Creates worktrees for each specified branch under ~/work/code/<repo-name>-<branch>
#   3. Runs yarn in each worktree
#   4. Creates a tmux session with two splits: neovim (left) and claude (right)
#
# Example:
#   gtmux feature-1 feature-2     # Creates two worktrees with tmux sessions
gtmux() {
  local branches=("$@")

  # Ensure at least one branch name is provided.
  if [[ ${#branches[@]} -eq 0 ]]; then
    echo "Usage: gtmux branch1 branch2 ..."
    return 1
  fi

  # Determine the current branch; exit if not in a git repository.
  local current_branch
  current_branch=$(git rev-parse --abbrev-ref HEAD) || {
    echo "Error: Not a git repository."
    return 1
  }

  # Determine repository root and name.
  local repo_root repo_name
  repo_root=$(git rev-parse --show-toplevel) || {
    echo "Error: Cannot determine repository root."
    return 1
  }
  repo_name=$(basename "$repo_root")

  for branch in "${branches[@]}"; do
    # If the branch does not exist, create it from the current branch.
    if ! git show-ref --verify --quiet "refs/heads/${branch}"; then
      echo "Branch '${branch}' does not exist. Creating it from '${current_branch}'..."
      if ! git branch "${branch}" "${current_branch}"; then
        echo "Error: Failed to create branch '${branch}'. Skipping."
        continue
      fi
    fi

    # Create worktree path.
    local worktree_path="${HOME}/work/code/${repo_name}-${branch}"

    # If the worktree directory already exists, skip creation.
    if [[ -d "${worktree_path}" ]]; then
      echo "Worktree for branch '${branch}' already exists at '${worktree_path}'. Skipping creation."
    else
      echo "Creating worktree for branch '${branch}' at '${worktree_path}'..."
      if ! git worktree add "${worktree_path}" "${branch}"; then
        echo "Error: Failed to create worktree for branch '${branch}'. Skipping."
        continue
      fi
    fi

    # Change to the worktree directory and run yarn
    echo "Running yarn in '${worktree_path}'..."
    if ! (cd "${worktree_path}" && yarn); then
      echo "Warning: yarn failed in '${worktree_path}'."
    fi

    # Create tmux session with neovim and claude
    local session_name="${repo_name}-${branch}"
    echo "Creating tmux session '${session_name}' with neovim and claude..."
    
    # Kill existing session if it exists
    tmux kill-session -t "${session_name}" 2>/dev/null || true
    
    # Create new session with neovim
    tmux new-session -d -s "${session_name}" -c "${worktree_path}" 'nvim'
    
    # Split window vertically and run claude in the right pane
    tmux split-window -h -t "${session_name}" -c "${worktree_path}" 'claude'
    
    # Select the left pane (neovim) by default
    tmux select-pane -t "${session_name}:0.0"
    
    echo "Tmux session '${session_name}' created successfully."
  done

  echo "All worktrees and tmux sessions created successfully."
}

# gtmuxhere: Create tmux session in current directory
#
# Usage: gtmuxhere
#
# This function creates a tmux session in the current directory with the
# naming convention: ${repo_name}-${branch}
gtmuxhere() {
  # Check if we're in a git repository
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "Error: Not in a git repository."
    return 1
  fi

  # Get repository name and current branch
  local repo_name branch session_name
  repo_name=$(basename "$(git rev-parse --show-toplevel)")
  branch=$(git rev-parse --abbrev-ref HEAD)
  session_name="${repo_name}-${branch}"

  echo "Creating tmux session '${session_name}' in current directory..."

  # Kill existing session if it exists
  tmux kill-session -t "${session_name}" 2>/dev/null || true

  # Create new session with neovim
  tmux new-session -d -s "${session_name}" -c "$(pwd)" 'nvim'

  # Split window vertically and run claude in the right pane
  tmux split-window -h -t "${session_name}" -c "$(pwd)" 'claude'

  # Select the left pane (neovim) by default
  tmux select-pane -t "${session_name}:0.0"

  echo "Tmux session '${session_name}' created successfully."
  echo "Attach with: tmux attach-session -t '${session_name}'"
}

# gtwremove: Interactive worktree removal
#
# Usage: gtwremove
#
# This function presents an interactive list of all worktrees and allows
# you to select which ones to remove. It will:
#   1. List all existing worktrees
#   2. Present an interactive selection menu
#   3. Remove selected worktrees and associated branches
#   4. Kill associated tmux sessions if they exist
gtwremove() {
  # Get list of worktrees (excluding the main one)
  local worktrees_raw
  worktrees_raw=$(git worktree list --porcelain | grep -E '^worktree|^branch' | paste - - | grep -v 'bare\|detached' | tail -n +2)
  
  if [[ -z "$worktrees_raw" ]]; then
    echo "No worktrees found to remove."
    return 0
  fi

  # Parse worktrees into arrays
  local worktree_paths=()
  local worktree_branches=()
  
  while IFS=$'\t' read -r worktree_line branch_line; do
    local path=$(echo "$worktree_line" | cut -d' ' -f2-)
    local branch=$(echo "$branch_line" | cut -d' ' -f2- | sed 's/refs\/heads\///')
    worktree_paths+=("$path")
    worktree_branches+=("$branch")
  done <<< "$worktrees_raw"

  if [[ ${#worktree_paths[@]} -eq 0 ]]; then
    echo "No worktrees found to remove."
    return 0
  fi

  echo "Available worktrees:"
  for i in "${!worktree_paths[@]}"; do
    echo "  $((i+1)). ${worktree_branches[i]} (${worktree_paths[i]})"
  done
  echo

  # Interactive selection
  local selections
  echo -n "Enter numbers to remove (space-separated, e.g., '1 3 5'): "
  read -r selections

  if [[ -z "$selections" ]]; then
    echo "No selections made. Exiting."
    return 0
  fi

  # Convert selections to array
  local selected_indices=($selections)
  local repo_name=$(basename "$(git rev-parse --show-toplevel)")

  # Remove selected worktrees
  for selection in "${selected_indices[@]}"; do
    local index=$((selection - 1))
    
    if [[ $index -ge 0 && $index -lt ${#worktree_paths[@]} ]]; then
      local path="${worktree_paths[index]}"
      local branch="${worktree_branches[index]}"
      local session_name="${repo_name}-${branch}"
      
      echo "Removing worktree: $branch ($path)"
      
      # Kill tmux session if it exists
      if tmux has-session -t "$session_name" 2>/dev/null; then
        echo "  Killing tmux session '$session_name'..."
        tmux kill-session -t "$session_name"
      fi
      
      # Remove worktree
      if git worktree remove "$path" --force; then
        echo "  Worktree removed successfully."
        
        # Delete the branch
        if git branch -D "$branch"; then
          echo "  Branch '$branch' deleted successfully."
        else
          echo "  Warning: Failed to delete branch '$branch'."
        fi
      else
        echo "  Error: Failed to remove worktree."
      fi
    else
      echo "Invalid selection: $selection (ignored)"
    fi
  done

  echo "Worktree removal completed."
} 

