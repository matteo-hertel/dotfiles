local config = {
	updater = {
		channel = "stable",
	},
	colorscheme = "tundra",
	options = {
		opt = {
			clipboard = "",
			mouse = "",
			-- foldexpr = "nvim_treesitter#foldexpr()", -- set Treesitter based folding
			-- foldmethod = "expr",
			linebreak = true, -- linebreak soft wrap at words
			list = true,     -- show whitespace characters
			scrolloff = 999, -- keep cursor centered
			colorcolumn = "80", -- show 80 character column
			cursorline = true, -- highlight current line
			listchars = {
				extends = "⟩",
				nbsp = "␣",
				precedes = "⟨",
				tab = "│→",
				trail = "·",
			},
			shortmess = vim.opt.shortmess + { I = true },
			guicursor = "",
			showbreak = "↪ ",
			wrap = true, -- soft wrap line
		},
	},
	-- Configure plugins
	plugins = {
		-- Add plugins, the packer syntax without the "use"
		init = {
			{
				"sam4llis/nvim-tundra",
				config = function()
					require("nvim-tundra").setup({
						plugins = {
							lsp = true,
							treesitter = true,
							nvimtree = true,
							cmp = true,
							context = true,
							dbui = true,
							gitsigns = true,
							telescope = true,
						},
					})
				end,
			},
			{ "ralismark/opsort.vim" },
			{ "tamton-aquib/duck.nvim" },
			{
				"bloznelis/before.nvim",
				config = function()
					require("before").setup({
						history_size = 42,
					})
				end,
			},
			{
				"NStefan002/speedtyper.nvim",
				branch = "main",
				config = function()
					require("speedtyper").setup({})
				end,
			},
			{
				"ray-x/lsp_signature.nvim",
				event = "BufRead",
				config = function()
					require("lsp_signature").setup()
				end,
			},
			{
				"princejoogie/dir-telescope.nvim",
				requires = { "nvim-telescope/telescope.nvim" },
				config = function()
					require("dir-telescope").setup({
						hidden = true,
						respect_gitignore = true,
					})
				end,
			},
			{
				"echasnovski/mini.nvim",
				branch = "stable",
				config = function()
					require("mini.ai").setup()
					require("mini.surround").setup()
				end,
			},
			{
				"cseickel/diagnostic-window.nvim",
				requires = { "MunifTanjim/nui.nvim" },
			},
			{
				"ThePrimeagen/harpoon",
				requires = { "nvim-lua/plenary.nvim" },
				config = function()
					require("harpoon").setup({})
					require("telescope").load_extension("harpoon")
				end,
			},
			{
				"folke/trouble.nvim",
				config = function()
					require("trouble").setup({})
				end,
			},
			{
				"zbirenbaum/copilot.lua",
				cmd = "Copilot",
				event = "InsertEnter",
				config = function()
					require("copilot").setup({
						suggestion = {
							enabled = true,
							auto_trigger = true,
							debounce = 75,
							keymap = {
								accept = "<C-CR>",
								dismiss = "<C-x>",
								next = "<C-n>",
							},
						},
						panel = { enabled = false, auto_trigger = false },
					})
				end,
			},
			{
				"RishabhRD/popfix",
			},
			{ "RishabhRD/nvim-cheat.sh", after = "popfix" },
			{
				"windwp/nvim-spectre",
			},
			["windwp/nvim-autopairs"] = { disable = true },
			["windwp/nvim-ts-autotag"] = { disable = true },
			["akinsho/bufferline.nvim"] = { disable = true },
			["Shatur/neovim-session-manager"] = { disable = true },
		},

		["neo-tree"] = {
			open_on_setup = true,
			window = { width = 40 },
			filesystem = {
				filtered_items = {
					hide_dotfiles = false,
					hide_gitignored = false,
					hide_by_name = { ".DS_Store", "thumbs.db" },
				},
			},
		},
		telescope = {
			{
				defaults = {
					file_ignore_patterns = { ".git" },
				},
			},
			pickers = {
				buffers = { sort_lastused = true },
				mappings = {
					i = {
						["<C-n>"] = require("telescope.actions").cycle_history_next,
						["<C-p>"] = require("telescope.actions").cycle_history_prev,
					},
				},
			},
		},
		-- use mason-lspconfig to configure LSP installations
		["mason-lspconfig"] = { -- overrides `require("mason-lspconfig").setup(...)`
			ensure_installed = { "sumneko_lua", "tsserver", "eslint" },
		},
		-- use mason-null-ls to install and setup configure null-ls sources
		["mason-null-ls"] = { -- overrides `require("mason-null-ls").setup(...)`
			ensure_installed = { "stylua", "prettier" },
		},
	},
	cmp = {
		source_priority = {
			copilot = 1000,
			nvim_lsp = 900,
			luasnip = 750,
			buffer = 500,
			path = 250,
		},
	},
	lsp = {
		formatting = {
			format_on_save = true,
			timeout_ms = 10000,
		},
		mappings = {
			n = {
				-- on_attach adds a default binding to K, I use that for moving up 6 lines
				-- so I need to delete the binding and update the over doc to gi
				["K"] = false,
			},
		},
		on_attach = function()
			vim.keymap.set("n", "gi", vim.lsp.buf.hover, { desc = "Hover symbol details", buffer = 0 })
		end,
		["server-settings"] = {
			sumneko_lua = {
				settings = {
					Lua = {
						runtime = { version = "LuaJIT" },
						diagnostics = {
							-- Get the language server to recognize the `vim` global
							globals = { "vim" },
						},
					},
				},
			},
		},
	},
	mappings = {
		n = {
			["<leader>a"] = {
				"<cmd>lua require('telescope.builtin').live_grep()<CR>",
				desc = "Find Words",
			},
			["<leader>fd"] = {
				"<cmd>lua require('telescope').extensions.dir.find_files()<CR>",
				desc = "Find file in directory",
			},
			["<leader>fa"] = {
				"<cmd>lua require('telescope').extensions.dir.live_grep()<CR>",
				desc = "Grep file in directory",
			},
			["<leader>dn"] = {
				"<cmd>lua require('duck').hatch()<CR>",
				desc = "New duck",
			},
			["<leader>dk"] = {
				"<cmd>lua require('duck').cook()<CR>",
				desc = "Cook duck",
			},
			["<leader>q"] = { "<cmd>q!<CR>", desc = "Close" },
			["<leader>wq"] = { "<cmd>wq!<CR>", desc = "Save and Close" },
			[";"] = {
				"<cmd>lua require('telescope.builtin').buffers()<CR>",
				desc = "Find Buffers",
			},
			["<S-k>"] = { "6k", desc = "Move 6 lines up" },
			["<S-j>"] = { "6j", desc = "Move 6 lines down" },
			["<S-h>"] = { "6h", desc = "Move 6 char left" },
			["<S-l>"] = { "6l", desc = "Move 6 char right" },
			["<C-h>"] = {
				"<cmd>lua require('smart-splits').move_cursor_left()<CR>",
				desc = "Move to tmux pane Left",
			},
			["<C-j>"] = {
				"<cmd>lua require('smart-splits').move_cursor_down()<CR>",
				desc = "Move to tmux pane Down",
			},
			["<C-k>"] = {
				"<cmd>lua require('smart-splits').move_cursor_up()<CR>",
				desc = "Move to tmux pane Up",
			},
			["<C-l>"] = {
				"<cmd>lua require('smart-splits').move_cursor_right()<CR>",
				desc = "Move to tmux pane Right",
			},
			["<leader>o"] = {
				"<cmd>lua require('before').jump_to_last_edit()<CR>",
				desc = "Jump to last edit",
			},
			["<leader>i"] = {
				"<cmd>lua require('before').jump_to_next_edit()<CR>",
				desc = "Jump to last edit",
			},
			["gc"] = {
				function()
					require("Comment.api").toggle.linewise.current()
				end,
				desc = "Comment line",
			},
			["<leader>lt"] = {
				"<cmd>TroubleToggle<cr>",
				desc = "Toggle diagnostics",
			},
			["<leader>lq"] = {
				"<cmd>TroubleToggle quickfix<cr>",
				desc = "Toggle quickfix",
			},
			["<leader>ta"] = {
				"<cmd>AerialToggle<cr>",
				desc = "Toggle aerial",
			},
			["<leader>S"] = {
				"<cmd>lua require('spectre').open()<CR>",
				desc = "Open Spectre",
			},
			["<leader>sw"] = {
				"<cmd>lua require('spectre').open_visual({select_word=true})<CR>",
				desc = "Specre on current word",
			},
			["<F1>"] = "<esc>",
			-- Harpoon
			["<leader>ha"] = {
				"<cmd>lua require('harpoon.mark').add_file()<CR>",
				desc = "Add file to Harpoon",
			},
			["<leader>hh"] = {
				"<cmd>lua require('harpoon.ui').toggle_quick_menu()<CR>",
				desc = "Show Harpoon menu",
			},
			["<C-n>"] = {
				"<cmd>lua require('harpoon.ui').nav_next()<CR>",
				desc = "Go to next Harpoon mark",
			},
			["<C-p>"] = {
				"<cmd>lua require('harpoon.ui').nav_prev()<CR>",
				desc = "Go to prev Harpoon mark",
			},
		},
		x = {
			["<leader>p"] = {
				'"_dP',
				desc = "Paste without overwriting clipboard",
			},
		},
		v = {
			["J"] = { ":m '>+1<CR>gv=gv", desc = "Move line down" },
			["K"] = { ":m '<-2<CR>gv=gv", desc = "Move line up" },
			["<leader>y"] = { '"+y', desc = "Copy to system clipboard" },
			["gc"] = {
				function()
					require("Comment.api").toggle.linewise(vim.fn.visualmode())
				end,
				desc = "Comment line",
			},
		},
	},
	--
	-- This function is run last
	polish = function()
		vim.filetype.add({
			extention = { mdx = "markdown" },
			pattern = {
				[".*%.link"] = "sh",
				[".*%.lua.link"] = "lua",
			},
		})
	end,
}
return config
