local config = {
    updater = {channel = "stable"},
    options = {
        opt = {
            clipboard = "",
            mouse = "",
            foldexpr = "nvim_treesitter#foldexpr()", -- set Treesitter based folding
            foldmethod = "expr",
            linebreak = true, -- linebreak soft wrap at words
            list = true, -- show whitespace characters
            listchars = {
                extends = "⟩",
                nbsp = "␣",
                precedes = "⟨",
                tab = "│→",
                trail = "·"
            },
            shortmess = vim.opt.shortmess + {I = true},
            showbreak = "↪ ",
            wrap = true -- soft wrap line
        }
    },
    enabled = {
        bufferline = true,
        colorizer = true,
        comment = true,
        dashboard = true,
        gitsigns = true,
        indent_blankline = true,
        lualine = true,
        neo_tree = true,
        neoscroll = true,
        symbols_outline = true,
        toggle_term = true,
        ts_rainbow = true,
        which_key = true
    },
    -- Configure plugins
    plugins = {
        -- Add plugins, the packer syntax without the "use"
        init = {
            {"alexghergh/nvim-tmux-navigation"},
            {"ralismark/opsort.vim"},
            {
                "ray-x/lsp_signature.nvim",
                event = "bufread",
                config = function()
                    require("lsp_signature").setup()
                end
            },
            ["windwp/nvim-autopairs"] = {disable = true},
            ["windwp/nvim-ts-autotag"] = {disable = true},
            ["stevearc/aerial.nvim"] = {disable = true},
            ["mrjones2014/smart-splits.nvim"] = {disable = true},
            ["declancm/cinnamon.nvim"] = {disable = true},
            ["akinsho/bufferline.nvim"] = {disable = true},
            ["Shatur/neovim-session-manager"] = {disable = true}

        },
        ["neo-tree"] = {
            open_on_setup = true,
            window = {width = 40},
            filesystem = {
                filtered_items = {
                    hide_dotfiles = false,
                    hide_gitignored = false,
                    hide_by_name = {".DS_Store", "thumbs.db"}
                }
            }
        },
        telescope = {
            pickers = {
                buffers = {sort_lastused = true},
                mappings = {
                    i = {
                        ["<C-n>"] = require("telescope.actions").cycle_history_next,
                        ["<C-p>"] = require("telescope.actions").cycle_history_prev
                    }
                }
            }
        },
        -- null-ls configuration
        ["null-ls"] = function(config)
            local null_ls = require "null-ls"
            local formatting = null_ls.builtins.formatting
            local diagnostics = null_ls.builtins.diagnostics
            -- Check supported formatters and linters
            -- https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/formatting
            -- https://github.com/jose-elias-alvarez/null-ls.nvim/tree/main/lua/null-ls/builtins/diagnostics
            config.sources = {
                -- Formatters
                formatting.prettier.with({prefer_local = "node_modules/.bin"}),
                formatting.lua_format, -- Linters
                diagnostics.eslint.with({prefer_local = "node_modules/.bin"}),
                diagnostics.luacheck
            }
            -- set up null-ls's on_attach function
            config.on_attach = function(client)
                -- NOTE: You can remove this on attach function to disable format on save
                if client.resolved_capabilities.document_formatting then
                    vim.api.nvim_create_autocmd("BufWritePre", {
                        desc = "Auto format before save",
                        pattern = "<buffer>",
                        callback = vim.lsp.buf.formatting_sync
                    })
                end
            end
            return config

        end
    },
    -- Modify which-key registration
    ["which-key"] = {
        -- Add bindings to the normal mode <leader> mappings
        register_n_leader = {
            ["a"] = {"<cmd>Telescope live_grep<CR>", "Find Files"},
            ["q"] = {"<cmd>q<CR>", "Close"},
            ["z"] = {"<cmd>wq<CR>", "Save and close"}
        }
    },
    cmp = {
        source_priority = {
            nvim_lsp = 1000,
            luasnip = 750,
            buffer = 500,
            path = 250
        }
    },
    lsp = {
        mappings = {
            n = {
                -- on_attach adds a default binding to K, I use that for moving up 6 lines
                -- so I need to delete the binding and update the over doc to gi
                ["K"] = false
            }
        },
        on_attach = function()
            vim.keymap.set("n", "gi", vim.lsp.buf.hover,
                           {desc = "Hover symbol details", buffer = 0})
        end
    },
    mappings = {
        n = {
            [";"] = {"<cmd>Telescope buffers<CR>", desc = "Find Buffers"},
            ["<S-k>"] = {"6k", desc = 'Move 6 lines up'},
            ["<S-j>"] = {"6j", desc = 'Move 6 lines down'},
            ["<S-h>"] = {"6h", desc = 'Move 6 char left'},
            ["<S-l>"] = {"6l", desc = 'Move 6 char right'},
            ["<C-h>"] = {
                "<cmd>lua require'nvim-tmux-navigation'.NvimTmuxNavigateLeft()<CR>",
                desc = "Move to tmux pane Left"
            },
            ["<C-j>"] = {
                "<cmd>lua require'nvim-tmux-navigation'.NvimTmuxNavigateDown()<CR>",
                desc = "Move to tmux pane Down"
            },
            ["<C-k>"] = {
                "<cmd>lua require'nvim-tmux-navigation'.NvimTmuxNavigateUp()<CR>",
                desc = "Move to tmux pane Up"
            },
            ["<C-l>"] = {
                "<cmd>lua require'nvim-tmux-navigation'.NvimTmuxNavigateRight()<CR>",
                desc = "Move to tmux pane Right"
            },
            ["gc"] = {
                "<cmd>lua require('Comment.api').toggle_current_linewise()<cr>",
                desc = "Toggle Comments"
            }

        },
        v = {
            ['<leader>y'] = {'"+y', desc = "Copy to system clipboard"},
            ["gc"] = {
                "<esc><cmd>lua require('Comment.api').toggle_linewise_op(vim.fn.visualmode())<cr>",
                desc = "Toggle comment line"
            }
        }

    },
    -- This function is run last
    -- good place to configure mappings and vim options
    polish = function()
        vim.filetype.add({
            extension = {
                -- tried to use the pattern table but no dice with the config
                --     ["~/%.config/**/*.lua.link"] = "lua" but no dice
                link = function(path)
                    if string.find(path, "lua") then
                        return "lua"
                    end
                    return "sh"
                end
            }
        })
    end
}

return config
