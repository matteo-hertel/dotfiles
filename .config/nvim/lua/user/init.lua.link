local config = {
	updater = {
		channel = "stable",
	},
	colorscheme = "tundra",
	options = {
		opt = {
			clipboard = "",
			mouse = "",
			-- foldexpr = "nvim_treesitter#foldexpr()", -- set Treesitter based folding
			-- foldmethod = "expr",
			linebreak = true, -- linebreak soft wrap at words
			list = true, -- show whitespace characters
			listchars = {
				extends = "⟩",
				nbsp = "␣",
				precedes = "⟨",
				tab = "│→",
				trail = "·",
			},
			shortmess = vim.opt.shortmess + { I = true },
			showbreak = "↪ ",
			wrap = true, -- soft wrap line
		},
	},
	-- Configure plugins
	plugins = {
		-- Add plugins, the packer syntax without the "use"
		init = {
			{
				"sam4llis/nvim-tundra",
				config = function()
					require("nvim-tundra").setup({
						plugins = {
							lsp = true,
							treesitter = true,
							nvimtree = true,
							cmp = true,
							context = true,
							dbui = true,
							gitsigns = true,
							telescope = true,
						},
					})
				end,
			},
			{ "ralismark/opsort.vim" },
			{ "tamton-aquib/duck.nvim" },
			{ "ellisonleao/glow.nvim" },
			{ "almo7aya/openingh.nvim" },
			{
				"ray-x/lsp_signature.nvim",
				event = "BufRead",
				config = function()
					require("lsp_signature").setup()
				end,
			},
			{
				"princejoogie/dir-telescope.nvim",
				requires = { "nvim-telescope/telescope.nvim" },
				config = function()
					require("dir-telescope").setup({
						hidden = true,
						respect_gitignore = true,
					})
				end,
			},
			{
				"echasnovski/mini.nvim",
				branch = "stable",
				config = function()
					require("mini.ai").setup()
					require("mini.surround").setup()
				end,
			},
			{
				"cseickel/diagnostic-window.nvim",
				requires = { "MunifTanjim/nui.nvim" },
			},
			{
				"folke/trouble.nvim",
				config = function()
					require("trouble").setup({})
				end,
			},
			{
				"zbirenbaum/copilot.lua",
				event = { "VimEnter" },
				after = "nvim-cmp",
				config = function()
					vim.defer_fn(function()
						require("copilot").setup({
							suggestion = {
								enabled = true,
								auto_trigger = true,
								debounce = 75,
								keymap = {
									accept = "kk",
									dismiss = "xx",
								},
							},
							panel = { enabled = false, auto_trigger = false },
						})
					end, 100)
				end,
			},
			{
				"zbirenbaum/copilot-cmp",
				after = { "copilot.lua" },
				config = function()
					require("copilot_cmp").setup({
						method = "getCompletionsCycling",
					})
					astronvim.add_cmp_source({ name = "copilot", priority = 1000 })
				end,
			},
			["windwp/nvim-autopairs"] = { disable = true },
			["windwp/nvim-ts-autotag"] = { disable = true },
			["akinsho/bufferline.nvim"] = { disable = true },
			["Shatur/neovim-session-manager"] = { disable = true },
		},
		["neo-tree"] = {
			open_on_setup = true,
			window = { width = 40 },
			filesystem = {
				filtered_items = {
					hide_dotfiles = false,
					hide_gitignored = false,
					hide_by_name = { ".DS_Store", "thumbs.db" },
				},
			},
		},
		telescope = {
			{ defaults = {
				file_ignore_patterns = { ".git" },
			} },
			pickers = {
				buffers = { sort_lastused = true },
				mappings = {
					i = {
						["<C-n>"] = require("telescope.actions").cycle_history_next,
						["<C-p>"] = require("telescope.actions").cycle_history_prev,
					},
				},
			},
		},
		-- use mason-lspconfig to configure LSP installations
		["mason-lspconfig"] = { -- overrides `require("mason-lspconfig").setup(...)`
			ensure_installed = { "sumneko_lua", "tsserver", "eslint" },
		},
		-- use mason-null-ls to install and setup configure null-ls sources
		["mason-null-ls"] = { -- overrides `require("mason-null-ls").setup(...)`
			ensure_installed = { "stylua", "prettier" },
		},
	},
	cmp = {
		source_priority = {
			copilot = 1000,
			nvim_lsp = 900,
			luasnip = 750,
			buffer = 500,
			path = 250,
		},
	},
	lsp = {
		formatting = {
			format_on_save = true,
			timeout_ms = 10000,
		},
		mappings = {
			n = {
				-- on_attach adds a default binding to K, I use that for moving up 6 lines
				-- so I need to delete the binding and update the over doc to gi
				["K"] = false,
			},
		},
		on_attach = function()
			vim.keymap.set("n", "gi", vim.lsp.buf.hover, { desc = "Hover symbol details", buffer = 0 })
		end,
		["server-settings"] = {
			sumneko_lua = {
				settings = {
					Lua = {
						runtime = { version = "LuaJIT" },
						diagnostics = {
							-- Get the language server to recognize the `vim` global
							globals = { "vim" },
						},
					},
				},
			},
		},
	},
	mappings = {
		n = {
			["<leader>a"] = {
				"<cmd>lua require('telescope.builtin').live_grep()<CR>",
				desc = "Find Words",
			},
			["<leader>fd"] = {
				"<cmd>lua require('telescope').extensions.dir.find_files()<CR>",
				desc = "Find file in directory",
			},
			["<leader>fa"] = {
				"<cmd>lua require('telescope').extensions.dir.live_grep()<CR>",
				desc = "Grep file in directory",
			},
			["<leader>dn"] = {
				"<cmd>lua require('duck').hatch()<CR>",
				desc = "New duck",
			},
			["<leader>dk"] = {
				"<cmd>lua require('duck').cook()<CR>",
				desc = "Cook duck",
			},
			["<leader>q"] = { "<cmd>q!<CR>", desc = "Close" },
			["<leader>wq"] = { "<cmd>wq!<CR>", desc = "Save and Close" },
			[";"] = {
				"<cmd>lua require('telescope.builtin').buffers()<CR>",
				desc = "Find Buffers",
			},
			["<S-k>"] = { "6k", desc = "Move 6 lines up" },
			["<S-j>"] = { "6j", desc = "Move 6 lines down" },
			["<S-h>"] = { "6h", desc = "Move 6 char left" },
			["<S-l>"] = { "6l", desc = "Move 6 char right" },
			["<C-h>"] = {
				"<cmd>lua require('smart-splits').move_cursor_left()<CR>",
				desc = "Move to tmux pane Left",
			},
			["<C-j>"] = {
				"<cmd>lua require('smart-splits').move_cursor_down()<CR>",
				desc = "Move to tmux pane Down",
			},
			["<C-k>"] = {
				"<cmd>lua require('smart-splits').move_cursor_up()<CR>",
				desc = "Move to tmux pane Up",
			},
			["<C-l>"] = {
				"<cmd>lua require('smart-splits').move_cursor_right()<CR>",
				desc = "Move to tmux pane Right",
			},
			["gc"] = {
				"<cmd>lua require('Comment.api').toggle.linewise.current()<CR>",
				desc = "Toggle Comments",
			},
			["<leader>lt"] = {
				"<cmd>TroubleToggle<cr>",
				desc = "Toggle diagnostics",
			},
			["<leader>lq"] = {
				"<cmd>TroubleToggle quickfix<cr>",
				desc = "Toggle quickfix",
			},
			["<leader>ta"] = {
				"<cmd>AerialToggle<cr>",
				desc = "Toggle aerial",
			},
			["<F1>"] = "<esc>",
		},
		v = {
			["<leader>y"] = { '"+y', desc = "Copy to system clipboard" },
			["gc"] = {
				"<esc><cmd>lua require('Comment.api').toggle.linewise(vim.fn.visualmode())<cr>",
				desc = "Toggle comment line",
			},
		},
	},
	--
	-- This function is run last
	polish = function()
		vim.filetype.add({
			pattern = {
				[".*%.lua.link"] = "lua",
				[".*%.sh.link"] = "sh",
				[".*%.link"] = "sh",
			},
		})
	end,
}
return config
