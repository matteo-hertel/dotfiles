# gtree: Create git worktrees from the current branch
#
# Usage: gtree [-p|--yarn] branch1 branch2 ...
#
# Options:
#   -p, --yarn    Install dependencies using yarn after creating worktree
#
# This function does the following:
#   1. Creates new branches from your current branch if they don't exist
#   2. Creates worktrees for each specified branch under ~/work/code/<repo-name>-<branch>
#   3. Optionally installs dependencies in each new worktree using yarn
#   4. Opens each worktree in VS Code if available
#
# Example:
#   gtree feature-1 feature-2     # Creates two worktrees
#   gtree -p new-feature         # Creates worktree and runs yarn install
gtree() {
  # Flag to determine whether to run "yarn install"
  local install_deps=false
  local branches=()

  # Parse command-line arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -p|--yarn)
        install_deps=true
        shift
        ;;
      *)
        branches+=("$1")
        shift
        ;;
    esac
  done

  # Ensure at least one branch name is provided.
  if [[ ${#branches[@]} -eq 0 ]]; then
    echo "Usage: gtree [ -p|--yarn ] branch1 branch2 ..."
    return 1
  fi

  # Determine the current branch; exit if not in a git repository.
  local current_branch
  current_branch=$(git rev-parse --abbrev-ref HEAD) || {
    echo "Error: Not a git repository."
    return 1
  }

  # Determine repository root and name.
  local repo_root repo_name
  repo_root=$(git rev-parse --show-toplevel) || {
    echo "Error: Cannot determine repository root."
    return 1
  }
  repo_name=$(basename "$repo_root")

  for branch in "${branches[@]}"; do
    # If the branch does not exist, create it from the current branch.
    if ! git show-ref --verify --quiet "refs/heads/${branch}"; then
      echo "Branch '${branch}' does not exist. Creating it from '${current_branch}'..."
      if ! git branch "${branch}" "${current_branch}"; then
        echo "Error: Failed to create branch '${branch}'. Skipping."
        continue
      fi
    fi

    # ... rest of existing code ...
  done
}

# Update gtreemerge to merge into current branch instead of develop
gtreemerge() {
  # Ensure exactly one argument is passed: the branch to merge.
  if [ $# -ne 1 ]; then
    echo "Usage: gtreemerge <branch-to-keep>"
    return 1
  fi

  local branch_to_keep="$1"
  local current_branch

  # Get current branch
  current_branch=$(git rev-parse --abbrev-ref HEAD) || {
    echo "Error: Not a git repository."
    return 1
  }

  # ... existing code until Step 2 ...

  # Step 2: Stay on current branch (instead of switching to develop)
  echo "Using current branch '${current_branch}' as merge target..."

  # Step 3: Merge the target branch into current branch
  echo "Merging branch '${branch_to_keep}' into '${current_branch}'..."
  if ! git merge "${branch_to_keep}" -m "feat: merge changes from '${branch_to_keep}'"; then
    echo "Error: Merge failed. Please resolve conflicts and try again."
    return 1
  fi

  # ... rest of existing code ...

    # Do not delete the current branch
    if [[ "$wt_branch" != "$current_branch" ]]; then
      if git branch -D "$wt_branch"; then
        echo "Branch '${wt_branch}' deleted."
      else
        echo "Warning: Failed to delete branch '${wt_branch}'."
      fi
    fi

  # ... existing code ...
} 